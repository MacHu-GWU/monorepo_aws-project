# This workflow will be used for app deployment
name: dummy_lambda_app_deploy

on:
  # ------------------------------------------------------------------------------
  # This workflow will be called by other workflow to deploy the app to certain environment
  #
  # Reference:
  #
  # - Creating a reusable workflow: https://docs.github.com/en/actions/using-workflows/reusing-workflows#creating-a-reusable-workflow
  # - on: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#on
  # ------------------------------------------------------------------------------
  workflow_call:
    inputs:
      user_env_name:
        type: string
        description: 'The user provided environment name'
        required: true

# Set common environment for all jobs and all steps
env:
  AWS_REGION: "us-east-1"
  USER_ENV_NAME: ${{ github.event.inputs.user_env_name }}

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  sandbox:
    runs-on: ubuntu-latest
    env:
      USER_ENV_NAME: sbx
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4
      - name: üîê Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          # --------------------------------------------------------------------
          # this role name has to match the ``github_action_open_id_connection.role_name`` field
          # in the ``bootstrap/config.json`` file
          # --------------------------------------------------------------------
          role-to-assume: arn:aws:iam::${{ secrets.DEVOPS_AWS_ACCOUNT_ID }}:role/monorepo-aws-github-oidc
          role-session-name: sample_role_session
          aws-region: ${{ env.AWS_REGION }}
      # ref: https://dev.to/aws-builders/deploy-to-aws-with-github-actions-and-aws-cdk-4m1e
      - name: üõ† Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
      - name: üíæ Install CDK in Node
        run: |
          npm install -g aws-cdk@2.111.0
          which cdk
          cdk --version
      - name: üêç Setup Python with pip cache
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          # ref: https://github.com/actions/setup-python#caching-packages-dependencies
          cache: 'pip'
          cache-dependency-path: ${{ env.DIR_PROJECT }}/requirements-automation.txt
      - name: üíæ Install virtualenv, poetry Dependencies
        run: |
          pip install -r {{ env.DIR_PROJECT }}/requirements-automation.txt
      - name: üêç Setup Python with poetry cache
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          # ref: https://github.com/actions/setup-python#caching-packages-dependencies
          cache: 'poetry'
          cache-dependency-path: ${{ env.DIR_PROJECT }}/poetry.lock
      - name: üêç üíæ Create Virtual Environment and Install all dependencies
        working-directory: ${{ env.DIR_PROJECT }}
        run: |
          virtualenv -p python3.9 .venv
          poetry install
      #-------------------------------------------------------------------------
      #
      #-------------------------------------------------------------------------
      - name: üöÄ Deploy Lambda App via CDK
        run: |
          echo deploy lambda app to ${USER_ENV_NAME}
      - name: üß™ Run Integration Test
        run: |
          echo run integration test on ${USER_ENV_NAME}
      - name: === üõë END OF THE JOB ===
        run: echo "END OF THE JOB"
