name: simple_lambda_deploy

on:
  workflow_call:
    inputs:
      user_env_name:
        type: string
        description: 'The user defined environment name'
        required: true

env:
  AWS_REGION: "us-east-1"
  DIR_PROJECT: "projects/simple_lambda-project"
  DEVOPS_AWS_ACCOUNT_ID: ${{ secrets.DEVOPS_AWS_ACCOUNT_ID }}
  SBX_AWS_ACCOUNT_ID: ${{ secrets.SBX_AWS_ACCOUNT_ID }}
  TST_AWS_ACCOUNT_ID: ${{ secrets.TST_AWS_ACCOUNT_ID }}
  PRD_AWS_ACCOUNT_ID: ${{ secrets.PRD_AWS_ACCOUNT_ID }}

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  deploy:
    name: üöÄ Deploy to ${{ inputs.user_env_name }}
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.user_env_name }}
    env:
      USER_ENV_NAME: ${{ inputs.user_env_name }}
    steps:
      - name: === üíæ PREPARATION ===
        run: echo "PREPARATION"
      - name: Git Clone the Repository
        uses: actions/checkout@v4
      - name: üîê Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.DEVOPS_AWS_ACCOUNT_ID }}:role/monorepo-aws-github-oidc
          role-session-name: devops_role_session
          aws-region: ${{ env.AWS_REGION }}
          disable-retry: true
      - name: üõ† Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
      - name: üíæ Install CDK in Node
        run: |
          npm install -g aws-cdk@2.111.0
          which cdk
          cdk --version
      - name: üêç Setup Python with pip cache
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          cache-dependency-path: ${{ env.DIR_PROJECT }}/requirements-automation.txt
      - name: üíæ Install virtualenv, poetry Dependencies
        run: |
          pip install -r ${{ env.DIR_PROJECT }}/requirements-automation.txt
      - name: üêç Setup Python with poetry cache
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'poetry'
          cache-dependency-path: ${{ env.DIR_PROJECT }}/poetry.lock
      - name: üêç üíæ Create Virtual Environment and Install all dependencies
        working-directory: ${{ env.DIR_PROJECT }}
        # at this moment, the virtualenv is not created it, so we should use the global Python here
        run: |
          python bin/s02_10_setup_venv_in_ci.py
      - name: === ‚úÖ START MAIN LOGICS ===
        run: echo "START MAIN LOGICS"
      - name: üöÄ Deploy Lambda App via CDK
        working-directory: ${{ env.DIR_PROJECT }}
        run: |
          .venv/bin/python bin/s04_05_deploy_app.py
      - name: üß™ Run Integration Test
        working-directory: ${{ env.DIR_PROJECT }}
        run: |
          .venv/bin/python bin/s03_04_run_int_test.py
#      - name: üîØ Create Config Snapshot
#        if: ${{ env.USER_ENV_NAME == 'prd' }}
#        working-directory: ${{ env.DIR_PROJECT }}
#        run: |
#          echo create config snapshot on $${ env.USER_ENV_NAME }}
#      - name: üè∑Ô∏è Create Git Tag
#        if: ${{ env.USER_ENV_NAME == 'prd' }}
#        working-directory: ${{ env.DIR_PROJECT }}
#        run: |
#          echo create git tag on $${ env.USER_ENV_NAME }}
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1 # https://github.com/mathieudutour/github-tag-action
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Create a GitHub release
        uses: ncipollo/release-action@v1 # https://github.com/marketplace/actions/create-release
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}
      - name: === üõë END OF THE JOB ===
        run: echo "END OF THE JOB"
