Data Store
==============================================================================


Overview
------------------------------------------------------------------------------
这个模块的主要任务是对进入到 Landing Zone 的非结构化文档进行处理. 这些处理包括 按照一定的目录结构存放到 S3 中, 将其转化为图片, 从中提取文本等操作. 其主要目的是方便后续能用程序来定位, 筛选, 批量读取这些数据, 摆脱了对 Landing Zone 中的文档的依赖.

该 Pipeline 可扩展程度非常高, 它允许你为一个文档创建各种 View, 例如一个 PDF 可能会有 image view, text view 和 JSON view 三种. 这个文档拥有哪些 view 取决于你的 use case.

架构图请参考 :ref:`aws-idp-main-diagram` 中的 Data Store 一页.


Document Component
------------------------------------------------------------------------------
这里我们引入了 Component 的概念. 一个文档是可以有很多个 Component 的, 例如 Email 的 Subject, From, To, Body, 以及每一个 Attachment 都可以视为是一个 Component. 对于 PDF 来说可能每一页就是一个 Document. 这是一个抽象的概念, 具体 Component 是什么取决于你的文档类型. 这个 Component 有助于将大文档拆分成小的部件以便后续处理 (例如 Textract 无法对超过 3000 页的文档进行处理).

这种设计提供了更好的扩展性, 可以让用户自己决定用何种方式将文档拆分成 Component. 用户甚至可以自己将文档拆分成多个子文档, 然后将子文档作为一个单独的文档发到这个系统中.


View
------------------------------------------------------------------------------
在对文档的后续处理中, 我们很可能不希望用原始的文档做输入, 而是用对我们的处理更为友好的格式做输入. 例如大部分的文档都是二进制的, 例如 PDF, Word, Image. 而我们后续的文档分析可能希望输入是纯文本. 这种用不同的格式来表现原始文档的信息的方式就叫做 View.

对于不同类型的文档, 我们会选择性的创建特定的几个 View. 但对大多数文档来说, Text View 都是必须的.

这种设计提供了更好的扩展性, 用户可以自己选择添加支持更多不同的 view, 并且能决定对于不同的文档需要哪些 view. 避免了创建不需要 view 浪费计算和存储资源.


Status Tracking
------------------------------------------------------------------------------
由于对文档的很多处理都比较耗时, 有时还要调用异步 API. 为了确保文档都能被正确的处理, 以及能对处理过程中出现的错误进行追踪, 所以我们使用 DynamoDB 来追踪每个 Document / Component 的处理进度.
