{
    "Comment": "A description of my state machine",
    "StartAt": "Step 1 - Check and Setup Prerequisites",
    "States": {
        "Step 1 - Check and Setup Prerequisites": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "OutputPath": "$.Payload",
            "Parameters": {
                "Payload": {
                    "exec_arn.$": "$$.Execution.Id",
                    "sfn_input.$": "$$.Execution.Input"
                },
                "FunctionName": "dynamodbsnaplake-sbx-step1_check_up"
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException",
                        "Lambda.TooManyRequestsException"
                    ],
                    "IntervalSeconds": 1,
                    "MaxAttempts": 3,
                    "BackoffRate": 2
                }
            ],
            "Next": "Step 2 - Run DynamoDB Export Job if not Exists",
            "Comment": "1. Check if S3 bucket is setup property\n2. Check if the S3 staging location is empty\n3. Check if the S3 datalake location is empty\n4. Check if the DynamoDB function is ready"
        },
        "Step 2 - Run DynamoDB Export Job if not Exists": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "OutputPath": "$.Payload",
            "Parameters": {
                "Payload": {
                    "exec_arn.$": "$$.Execution.Id",
                    "sfn_input.$": "$$.Execution.Input"
                },
                "FunctionName": "dynamodbsnaplake-sbx-step2_run_export_job"
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException",
                        "Lambda.TooManyRequestsException"
                    ],
                    "IntervalSeconds": 1,
                    "MaxAttempts": 3,
                    "BackoffRate": 2
                }
            ],
            "Next": "Get Export Job Status",
            "Comment": "If the DynamoDB export run never executed before, run DynamoDB export."
        },
        "Get Export Job Status": {
            "Type": "Task",
            "Parameters": {
                "ExportArn.$": "$.ExportDescription.ExportArn"
            },
            "Resource": "arn:aws:states:::aws-sdk:dynamodb:describeExport",
            "Next": "Export Job succeeded?"
        },
        "Wait X Seconds": {
            "Type": "Wait",
            "Seconds": 30,
            "Next": "Get Export Job Status"
        },
        "Export Job succeeded?": {
            "Type": "Choice",
            "Choices": [
                {
                    "Variable": "$.ExportDescription.ExportStatus",
                    "StringEquals": "FAILED",
                    "Next": "Fail"
                },
                {
                    "Variable": "$.ExportDescription.ExportStatus",
                    "StringEquals": "COMPLETED",
                    "Next": "Step 3 - Run ETL Job Planner"
                }
            ],
            "Default": "Wait X Seconds"
        },
        "Step 3 - Run ETL Job Planner": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "OutputPath": "$.Payload",
            "Parameters": {
                "Payload": {
                    "exec_arn.$": "$$.Execution.Id",
                    "sfn_input.$": "$$.Execution.Input"
                },
                "FunctionName": "dynamodbsnaplake-sbx-step3_run_etl_planner"
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException",
                        "Lambda.TooManyRequestsException"
                    ],
                    "IntervalSeconds": 1,
                    "MaxAttempts": 3,
                    "BackoffRate": 2
                }
            ],
            "Next": "Step 4 - Generate Many DB Snapshot File Group Manifest and dispatch to Workers",
            "Comment": "Analyze the DynamoDB export data and determine the optimal batch size for each concurrent worker. Also, generate the DB Snapshot File Manifest File."
        },
        "Step 4 - Generate Many DB Snapshot File Group Manifest and dispatch to Workers": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "OutputPath": "$.Payload",
            "Parameters": {
                "Payload": {
                    "exec_arn.$": "$$.Execution.Id",
                    "sfn_input.$": "$$.Execution.Input"
                },
                "FunctionName": "dynamodbsnaplake-sbx-step4_run_snap_to_stage_orch"
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException",
                        "Lambda.TooManyRequestsException"
                    ],
                    "IntervalSeconds": 1,
                    "MaxAttempts": 3,
                    "BackoffRate": 2
                }
            ],
            "Next": "Dispatch DB Snapshot File Group Manifest to Workers"
        },
        "Dispatch DB Snapshot File Group Manifest to Workers": {
            "Type": "Map",
            "ItemProcessor": {
                "ProcessorConfig": {
                    "Mode": "DISTRIBUTED",
                    "ExecutionType": "STANDARD"
                },
                "StartAt": "Step 5 - Process DB Snapshot File Group Manifest",
                "States": {
                    "Step 5 - Process DB Snapshot File Group Manifest": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::lambda:invoke",
                        "OutputPath": "$.Payload",
                        "Parameters": {
                            "Payload.$": "$",
                            "FunctionName": "dynamodbsnaplake-sbx-step5_run_snap_to_stage_work"
                        },
                        "Retry": [
                            {
                                "ErrorEquals": [
                                    "Lambda.ServiceException",
                                    "Lambda.AWSLambdaException",
                                    "Lambda.SdkClientException",
                                    "Lambda.TooManyRequestsException"
                                ],
                                "IntervalSeconds": 1,
                                "MaxAttempts": 3,
                                "BackoffRate": 2
                            }
                        ],
                        "End": true
                    }
                }
            },
            "Label": "SnapshotToStagingWorkers",
            "MaxConcurrency": 100,
            "Next": "Step 6 - Generate Partition File Group Manifest and Dispatch to Workers",
            "ItemReader": {
                "Resource": "arn:aws:states:::s3:getObject",
                "ReaderConfig": {
                    "InputType": "JSON"
                },
                "Parameters": {
                    "Bucket": "bucket",
                    "Key": "file.json"
                }
            }
        },
        "Step 6 - Generate Partition File Group Manifest and Dispatch to Workers": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "OutputPath": "$.Payload",
            "Parameters": {
                "Payload": {
                    "exec_arn.$": "$$.Execution.Id",
                    "sfn_input.$": "$$.Execution.Input"
                },
                "FunctionName": "dynamodbsnaplake-sbx-step6_run_stage_to_lake_orch"
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException",
                        "Lambda.TooManyRequestsException"
                    ],
                    "IntervalSeconds": 1,
                    "MaxAttempts": 3,
                    "BackoffRate": 2
                }
            ],
            "Next": "Dispatch Partition File Group Manifest to Workers"
        },
        "Dispatch Partition File Group Manifest to Workers": {
            "Type": "Map",
            "ItemProcessor": {
                "ProcessorConfig": {
                    "Mode": "DISTRIBUTED",
                    "ExecutionType": "STANDARD"
                },
                "StartAt": "Step 7 - Process Partition File Group Manifest",
                "States": {
                    "Step 7 - Process Partition File Group Manifest": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::lambda:invoke",
                        "OutputPath": "$.Payload",
                        "Parameters": {
                            "Payload.$": "$",
                            "FunctionName": "dynamodbsnaplake-sbx-step7_run_stage_to_lake_work"
                        },
                        "Retry": [
                            {
                                "ErrorEquals": [
                                    "Lambda.ServiceException",
                                    "Lambda.AWSLambdaException",
                                    "Lambda.SdkClientException",
                                    "Lambda.TooManyRequestsException"
                                ],
                                "IntervalSeconds": 1,
                                "MaxAttempts": 3,
                                "BackoffRate": 2
                            }
                        ],
                        "End": true
                    }
                }
            },
            "Next": "Success",
            "Label": "StagingToDatalakeWorkers",
            "MaxConcurrency": 100,
            "ItemReader": {
                "Resource": "arn:aws:states:::s3:getObject",
                "ReaderConfig": {
                    "InputType": "JSON"
                },
                "Parameters": {
                    "Bucket": "bucket",
                    "Key": "file.json"
                }
            }
        },
        "Success": {
            "Type": "Succeed"
        },
        "Fail": {
            "Type": "Fail"
        }
    }
}